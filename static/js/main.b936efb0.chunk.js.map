{"version":3,"sources":["types/Status.ts","components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoList.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","services/fiteredTodos.ts","index.tsx"],"names":["Status","TodoFilter","query","onQueryChange","onStatusChange","className","onSubmit","event","preventDefault","onChange","target","value","ALL","ACTIVE","COMPLETED","type","placeholder","style","pointerEvents","onClick","TodoList","todos","seletedUsers","setSeletedUsers","map","todo","classNames","id","completed","title","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","selectedTodo","setSelectedTodo","useState","user","setUser","useEffect","userId","href","email","name","App","setTodos","loading","setLoading","status","setStatus","setQuery","finally","visibleTodos","useMemo","copyTodos","filter","toLowerCase","includes","filteredTodos","newQuery","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b936efb0.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","/* eslint-disable react/button-has-type */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { Status } from '../../types/Status';\n\ninterface Props {\n  query: string;\n  onQueryChange: (string: string) => void;\n  onStatusChange: (status: Status) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onQueryChange,\n  onStatusChange,\n}) => {\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onQueryChange(event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    onStatusChange(event.target.value as Status);\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            onChange={handleSelectChange}\n            data-cy=\"statusSelect\"\n          >\n            <option\n              value={Status.ALL}\n            >\n              All\n            </option>\n            <option\n              value={Status.ACTIVE}\n            >\n              Active\n            </option>\n            <option\n              value={Status.COMPLETED}\n            >\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          onChange={handleQueryChange}\n          value={query}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {query && (\n            <button\n              onClick={() => onQueryChange('')}\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  seletedUsers: Todo | null,\n  setSeletedUsers: (user: Todo) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  seletedUsers,\n  setSeletedUsers,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': seletedUsers === todo,\n            })}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n\n            {todo.completed ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={\n                  todo.completed ? 'has-text-success' : 'has-text-danger'\n                }\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSeletedUsers(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': seletedUsers !== todo,\n                    'fa-eye-slash': seletedUsers === todo,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(400)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  selectedTodo: Todo;\n  setSelectedTodo: (user: Todo | null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(selectedTodo?.userId).then(setUser);\n  }, [selectedTodo?.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Status } from './types/Status';\nimport { getTodos } from './api';\nimport { filteredTodos } from './services/fiteredTodos';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState(Status.ALL);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then(setTodos)\n      .finally(() => setLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return filteredTodos(todos, { query, status });\n  }, [todos, query, status]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onStatusChange={setStatus}\n                onQueryChange={(newQuery) => setQuery(newQuery)}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && <Loader />}\n\n              {!loading && todos.length > 0 && (\n                <TodoList\n                  todos={visibleTodos}\n                  setSeletedUsers={setSelectedTodo}\n                  seletedUsers={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          setSelectedTodo={setSelectedTodo}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport function filteredTodos(\n  todos: Todo[],\n  { query, status }: { query: string; status: string },\n): Todo[] {\n  let copyTodos = [...todos];\n\n  if (query) {\n    copyTodos = copyTodos.filter((todo) => todo.title.toLowerCase()\n      .includes(query.toLowerCase()));\n  }\n\n  if (status) {\n    copyTodos = copyTodos.filter((todo) => {\n      switch (status) {\n        case Status.ACTIVE:\n          return !todo.completed;\n        case Status.COMPLETED:\n          return todo.completed;\n        default:\n          return true;\n      }\n    });\n  }\n\n  return copyTodos;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}